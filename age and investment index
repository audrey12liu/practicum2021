import requests
import json
import pandas as pd
import numpy as np
from cherrypicker import CherryPicker

url1 = 'https://api.crunchbase.com/api/v4/searches/organizations?user_key=___'
myobj1 = {
  "field_ids": [
    "description",
    "founded_on",
    "founder_identifiers",
    "identifier",
    "investor_identifiers",
    "num_investors",
    "num_exits",
    "num_funding_rounds",
    "funding_stage",
    "last_equity_funding_type",
    "valuation",
    "revenue_range",
    "status",
    "categories",
    "category_groups"
  ],
  "order": [
    {
      "field_id": "rank_org",
      "sort": "asc"
    }
  ],
  "query": [
    {
      "type": "predicate",
      "field_id": "categories", #before this was "categories"
      "operator_id": "includes",
      "values": [

        #"machine-learning",
        #"semiconductor"
        "Biotechnology",
        "Manufacturing",
        "Science and Engineering",
        "Hardware",
        "Information Technology",
        "Sustainability",
        "Consumer Electronics",
        "Data and Analytics",
        "Software",
        "Administrative Services",
        "Internet Services",
        "Privacy and Security",
        "Messaging and Telecommunications",
        "Artificial Intelligence"
      ]
    }


  ],
  "card_ids": [
    "raised_funding_rounds"
  ],
  "limit": 900 
}

x = requests.post(url1, json = myobj1)
with open('practicum.json', 'w', encoding='utf-8') as f:
    json.dump(x.json(), f, ensure_ascii=False, indent=4)

with open('practicum.json') as file:
    data = json.load(file)

picker = CherryPicker(data)
flat = picker['entities'].flatten().get()
output = pd.DataFrame(flat)

##data cleaning##
data= output.copy()
df = data[['properties_founded_on_value','properties_identifier_value','properties_status',
           'properties_num_funding_rounds','properties_num_investors','properties_funding_stage',
           'properties_last_equity_funding_type','properties_valuation_value',
           'properties_investor_identifiers_0_value','properties_investor_identifiers_1_value',
           'properties_investor_identifiers_2_value','properties_investor_identifiers_3_value',
           'properties_investor_identifiers_4_value',
           'properties_num_exits']]
df=df.rename(columns={'properties_founded_on_value':'founded_on', 'properties_identifier_value':'company_name',
                   'properties_status':'status','properties_funding_stage':'funding_stage',
                   'properties_valuation_value':'valuation',
                   'properties_investor_identifiers_0_value':'investor1',
                   'properties_investor_identifiers_1_value':'investor2',
                   'properties_investor_identifiers_2_value':'investor3',
                   'properties_investor_identifiers_3_value':'investor4',
                   'properties_investor_identifiers_4_value':'investor5',
                   'properties_num_funding_rounds':'num_funding_rounds', 'properties_num_investors':'num_investors',
                   'properties_last_equity_funding_type':'funding_type',                 
                   'properties_num_exits':'num_exits'})

from datetime import datetime
df['founded_on']= pd.to_datetime(df['founded_on'])
df['today']= pd.to_datetime('today').normalize()
df['company_age'] = df['today']-df['founded_on']
df['company_age_years'] = df['company_age'].dt.total_seconds() / (365.25*24*3600)
df.drop(columns=['founded_on', 'today','company_age'], inplace=True)

df['castout_rate'] = (df['num_exits']/df['num_investors'])

##investment index##
def funding_score(x):
    if x == 'seed' or x =='angel':
        return 10
    elif x == 'series_a':
        return 8
    elif x == 'series_b':
        return 5
    elif x == 'series_c':
        return 1
df['funding_score']=df['funding_type'].apply(funding_score)


def num_investor_score(x):
    if x < 5:
        return 10
    elif 5<=x<=10:
        return 5
    else:
        return 1
df['num_investor_score']=df['num_investors'].apply(num_investor_score)


def value_score(x):
    if x <= 10000000:
        return 10
    elif 10000000<x<=50000000:
        return 9
    elif 50000000<x<=100000000:
        return 8
    elif 100000000<x<=250000000:
        return 7
    elif 250000000<x<=500000000:
        return 5
    elif 500000000<x<=1000000000:
        return 3
    else:
        return 1
df['value_score']=df['valuation'].apply(value_score)

